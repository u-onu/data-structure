# Complete Binary Tree
    It has 2^d nodes for at every level except for the deepest level,
    and at the ddpest level, all the nodes are at the leftmost places.
i: address of a node
left(i) = 2 * i
right(i) = 2 * i + 1
parent(i) = i / 2

# Heap
A: a complete binary tree
A(parent(i)) >= A(i): max-heap

n: size of max-heap
extract(){
    r <- A(1)
    A(1) <- A(n)
    n <- n - 1

    i <- 1
    while(i <= n){
        if(A(i) < A(2 * i) && A(i) < A(2 * i + 1)){
            if(A(2 * i) > A(2 * i + 1)){
                swap(A(i), A(2 * i))
                i <- 2 * i
            }
            else{
                swap(A(i), A(2 * i + 1))
                i <- 2 * i + 1
            }           
        }

        else if(A(i) < A(2 * i)){
            swap(A(i), A(2 * i))
            i <- 2 * i
        }

        else if(A(i) < A(2 * i + 1)){
            swap(A(i), A(2 * i + 1))
            i <- 2 * i + 1
        }

        else
            break
    }


    return r
}

Insert(x){
    n <- n + 1
    a(n + 1) <- x

    i <- n + 1
    while(i > 0){
        if(A(i / 2) < A(i)){
            swap(A(i / 2), A(i))
            i <- i / 2
        }
        else
            break
    }
}



# Priority Queue
    a queue whose items have priorities.
    push(x, p), pop(): O(log n) with heap

# Heap wort
    push all elements and pop all elements: O(nlog n)
